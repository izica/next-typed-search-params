{"version":3,"file":"index.umd.min.js","sources":["../src/helpers/parseValue.ts","../src/configure/settings.ts","../src/helpers/parseSearchParams.ts","../src/helpers/stringifySearchParams.ts","../src/helpers/setSearchParams.ts","../src/hooks/useSearchParams.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const parseValue = (value: any, schema: z.ZodType | undefined) => {\n    if (value === undefined || schema === undefined) {\n        return undefined;\n    }\n    const { success, data } = schema.safeParse(value);\n    if (success) {\n        return data\n    }\n\n    return undefined;\n}\n","import type { ArrayFormatType } from \"../types/ArrayFormatType\";\n\nclass Settings {\n    arrayFormat: ArrayFormatType = \"bracket\";\n    arrayFormatSeparator: string = \",\";\n}\n\nconst settings = new Settings();\n\nexport { settings as Settings }\n","import { z } from \"zod\";\nimport queryString from \"query-string\";\n\nimport { parseValue } from \"./parseValue\";\nimport { Settings } from \"../configure/settings\";\n\nexport const parseSearchParams = <T, >(schema: Record<string, z.ZodType>, searchParamsString: string): T => {\n    const parsedSearchParams = queryString.parse(decodeURIComponent(searchParamsString), {\n        arrayFormat: Settings.arrayFormat,\n    });\n    const result: Record<string, any> = {};\n\n    for (let key in schema) {\n        result[key] = parseValue(parsedSearchParams[key], schema[key] || undefined);\n    }\n\n    return result as T;\n}\n","import queryString from \"query-string\";\n\nimport { Settings } from \"../configure/settings\";\n\nexport const stringifySearchParams = (searchParams: Record<string, any>): string => {\n    return queryString.stringify(searchParams, {\n        arrayFormat: Settings.arrayFormat,\n        arrayFormatSeparator: ',',\n        encode: false,\n        skipNull: true,\n        skipEmptyString: true,\n    });\n}\n","import { stringifySearchParams } from \"./stringifySearchParams\";\n\nexport const setSearchParams = (entry: Record<string, any>) => {\n    const href = `${window.location.pathname}?` + stringifySearchParams(entry);\n    console.log(href)\n    history.replaceState({\n        ...history.state,\n        as: href,\n        new: href\n    }, \"\", href);\n\n    window.dispatchEvent(new Event('setSearchParams'));\n}\n","import { z } from \"zod\";\nimport { useSearchParams as useSearchParamsNext } from \"next/navigation\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { parseSearchParams } from \"../helpers/parseSearchParams\";\n\nexport const useSearchParams = <T extends Record<string, z.ZodType>, >(config: (zod: typeof z) => T) => {\n    const schema = useMemo(() => z.object(config(z)), []);\n    const entry = useMemo(() => config(z), []);\n\n    const searchParams = useSearchParamsNext();\n\n    const [data, setData] = useState(\n        parseSearchParams<z.infer<typeof schema>>(entry, searchParams.toString())\n    );\n\n    useEffect(() => {\n        setData(parseSearchParams<z.infer<typeof schema>>(entry, searchParams.toString()));\n    }, [searchParams, schema, entry]);\n\n    useEffect(() => {\n        const handler = () => {\n            setData(parseSearchParams<z.infer<typeof schema>>(entry, window.location.search.substring(1)));\n        }\n        window.addEventListener('setSearchParams', handler);\n        return () => window.removeEventListener('setSearchParams', handler);\n    }, [entry]);\n\n    return data as z.infer<typeof schema>;\n}\n"],"names":["parseValue","value","schema","undefined","_a","safeParse","success","data","settings","this","arrayFormat","arrayFormatSeparator","parseSearchParams","searchParamsString","parsedSearchParams","queryString","parse","decodeURIComponent","Settings","result","key","stringifySearchParams","searchParams","stringify","encode","skipNull","skipEmptyString","entry","href","concat","window","location","pathname","console","log","history","replaceState","__assign","state","as","new","dispatchEvent","Event","config","useMemo","z","object","useSearchParamsNext","useState","toString","setData","useEffect","handler","search","substring","addEventListener","removeEventListener"],"mappings":";;;;;obAEO,IAAMA,EAAa,SAACC,EAAYC,GACnC,QAAcC,IAAVF,QAAkCE,IAAXD,EAA3B,CAGM,IAAAE,EAAoBF,EAAOG,UAAUJ,GAAnCK,EAAOF,EAAAE,QAAEC,SACjB,OAAID,EACOC,OADX,CAFC,CAOL,ECLMC,EAAW,IALjB,WACIC,KAAWC,YAAoB,UAC/BD,KAAoBE,qBAAW,GAClC,ECCYC,EAAoB,SAAMV,EAAmCW,GACtE,IAAMC,EAAqBC,EAAYC,MAAMC,mBAAmBJ,GAAqB,CACjFH,YAAaQ,EAASR,cAEpBS,EAA8B,CAAA,EAEpC,IAAK,IAAIC,KAAOlB,EACZiB,EAAOC,GAAOpB,EAAWc,EAAmBM,GAAMlB,EAAOkB,SAAQjB,GAGrE,OAAOgB,CACX,ECbaE,EAAwB,SAACC,GAClC,OAAOP,EAAYQ,UAAUD,EAAc,CACvCZ,YAAaQ,EAASR,YACtBC,qBAAsB,IACtBa,QAAQ,EACRC,UAAU,EACVC,iBAAiB,GAEzB,wRCV+B,SAACC,GAC5B,IAAMC,EAAO,GAAGC,OAAAC,OAAOC,SAASC,SAAQ,KAAMX,EAAsBM,GACpEM,QAAQC,IAAIN,GACZO,QAAQC,aAAYC,EAAAA,EAAA,CAAA,EACbF,QAAQG,QACXC,GAAIX,EACJY,IAAKZ,IACN,GAAIA,GAEPE,OAAOW,cAAc,IAAIC,MAAM,mBACnC,8CCN+B,SAAwCC,GACnE,IAAMzC,EAAS0C,EAAAA,SAAQ,WAAM,OAAAC,EAAAA,EAAEC,OAAOH,EAAOE,KAAG,GAAE,IAC5ClB,EAAQiB,EAAOA,SAAC,WAAM,OAAAD,EAAOE,OAAI,IAEjCvB,EAAeyB,EAAAA,kBAEf3C,EAAkB4C,EAAAA,SACpBpC,EAA0Ce,EAAOL,EAAa2B,aAD3D1C,OAAM2C,OAgBb,OAZAC,EAAAA,WAAU,WACND,EAAQtC,EAA0Ce,EAAOL,EAAa2B,YACzE,GAAE,CAAC3B,EAAcpB,EAAQyB,IAE1BwB,EAAAA,WAAU,WACN,IAAMC,EAAU,WACZF,EAAQtC,EAA0Ce,EAAOG,OAAOC,SAASsB,OAAOC,UAAU,IAC9F,EAEA,OADAxB,OAAOyB,iBAAiB,kBAAmBH,GACpC,WAAM,OAAAtB,OAAO0B,oBAAoB,kBAAmBJ,GAC/D,GAAG,CAACzB,IAEGpB,CACX"}
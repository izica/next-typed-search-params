{"version":3,"file":"index.umd.min.js","sources":["../src/helpers/parseValue.ts","../src/configure/settings.ts","../src/helpers/parseSearchParams.ts","../src/helpers/stringifySearchParams.ts","../src/index.ts","../src/hooks/useSearchParams.ts","../src/helpers/setSearchParams.ts","../src/configure/index.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const parseValue = (value: any, schema: z.ZodType | undefined) => {\n    if (value === undefined || schema === undefined) {\n        return undefined;\n    }\n    const { success, data } = schema.safeParse(value);\n    if (success) {\n        return data\n    }\n\n    return undefined;\n}\n","import type { ArrayFormatType } from \"../types/ArrayFormatType\";\n\nclass Settings {\n    arrayFormat: ArrayFormatType = \"bracket\";\n    arrayFormatSeparator: string = \",\";\n}\n\nconst settings = new Settings();\n\nexport { settings as Settings }\n","import { z } from \"zod\";\nimport queryString from \"query-string\";\n\nimport { parseValue } from \"./parseValue\";\nimport { Settings } from \"../configure/settings\";\n\nexport const parseSearchParams = <T, >(schema: Record<string, z.ZodType>, searchParamsString: string): T => {\n    const parsedSearchParams = queryString.parse(decodeURIComponent(searchParamsString), {\n        arrayFormat: Settings.arrayFormat,\n    });\n    const result: Record<string, any> = {};\n\n    for (let key in schema) {\n        result[key] = parseValue(parsedSearchParams[key], schema[key] || undefined);\n    }\n\n    return result as T;\n}\n","import queryString from \"query-string\";\n\nimport { Settings } from \"../configure/settings\";\n\nexport const stringifySearchParams = (searchParams: Record<string, any>): string => {\n    return queryString.stringify(searchParams, {\n        arrayFormat: Settings.arrayFormat,\n        arrayFormatSeparator: ',',\n        encode: false,\n        skipNull: true,\n        skipEmptyString: true,\n    });\n}\n","import { useSearchParams } from './hooks/useSearchParams';\nimport { stringifySearchParams } from './helpers/stringifySearchParams';\nimport { setSearchParams } from './helpers/setSearchParams';\nimport { configure } from './configure';\n\nexport default {\n    useSearchParams,\n    stringifySearchParams,\n    setSearchParams,\n    configure\n}\n","import { z } from \"zod\";\nimport { useSearchParams as useSearchParamsNext } from \"next/navigation\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { parseSearchParams } from \"../helpers/parseSearchParams\";\n\nexport const useSearchParams = <T extends Record<string, z.ZodType>, >(config: (zod: typeof z) => T) => {\n    const schema = useMemo(() => z.object(config(z)), []);\n    const entry = useMemo(() => config(z), []);\n\n    const searchParams = useSearchParamsNext();\n\n    const [data, setData] = useState(\n        parseSearchParams<z.infer<typeof schema>>(entry, searchParams.toString())\n    );\n\n    useEffect(() => {\n        setData(parseSearchParams<z.infer<typeof schema>>(entry, searchParams.toString()));\n    }, [searchParams, schema, entry]);\n\n    useEffect(() => {\n        const handler = () => {\n            setData(parseSearchParams<z.infer<typeof schema>>(entry, window.location.search.substring(1)));\n        }\n        window.addEventListener('setSearchParams', handler);\n        return () => window.removeEventListener('setSearchParams', handler);\n    }, [entry]);\n\n    return data as z.infer<typeof schema>;\n}\n","import { stringifySearchParams } from \"./stringifySearchParams\";\n\nexport const setSearchParams = (entry: Record<string, any>) => {\n    const href = `${window.location.pathname}?` + stringifySearchParams(entry);\n    history.replaceState({\n        ...history.state,\n        as: href,\n        new: href\n    }, \"\", href);\n\n    window.dispatchEvent(new Event('setSearchParams'));\n}\n","import type { ArrayFormatType } from \"../types/ArrayFormatType\";\nimport { Settings } from \"./settings\";\n\nexport function configure(options: {\n    arrayFormat?: ArrayFormatType,\n    arrayFormatSeparator?: string\n}) {\n    if (options[\"arrayFormat\"]) {\n        Settings.arrayFormat = options[\"arrayFormat\"];\n    }\n\n    if (options[\"arrayFormatSeparator\"]) {\n        Settings.arrayFormatSeparator = options[\"arrayFormatSeparator\"];\n    }\n}\n"],"names":["parseValue","value","schema","undefined","_a","safeParse","success","data","settings","this","arrayFormat","arrayFormatSeparator","parseSearchParams","searchParamsString","parsedSearchParams","queryString","parse","decodeURIComponent","Settings","result","key","stringifySearchParams","searchParams","stringify","encode","skipNull","skipEmptyString","index","useSearchParams","config","useMemo","z","object","entry","useSearchParamsNext","useState","toString","setData","useEffect","handler","window","location","search","substring","addEventListener","removeEventListener","setSearchParams","href","concat","pathname","history","replaceState","__assign","state","as","new","dispatchEvent","Event","configure","options"],"mappings":";;;;;obAEO,IAAMA,EAAa,SAACC,EAAYC,GACnC,QAAcC,IAAVF,QAAkCE,IAAXD,EAA3B,CAGM,IAAAE,EAAoBF,EAAOG,UAAUJ,GAAnCK,EAAOF,EAAAE,QAAEC,SACjB,OAAID,EACOC,OADX,CAFC,CAOL,ECLMC,EAAW,IALjB,WACIC,KAAWC,YAAoB,UAC/BD,KAAoBE,qBAAW,GAClC,ECCYC,EAAoB,SAAMV,EAAmCW,GACtE,IAAMC,EAAqBC,EAAYC,MAAMC,mBAAmBJ,GAAqB,CACjFH,YAAaQ,EAASR,cAEpBS,EAA8B,CAAA,EAEpC,IAAK,IAAIC,KAAOlB,EACZiB,EAAOC,GAAOpB,EAAWc,EAAmBM,GAAMlB,EAAOkB,SAAQjB,GAGrE,OAAOgB,CACX,ECbaE,EAAwB,SAACC,GAClC,OAAOP,EAAYQ,UAAUD,EAAc,CACvCZ,YAAaQ,EAASR,YACtBC,qBAAsB,IACtBa,QAAQ,EACRC,UAAU,EACVC,iBAAiB,GAEzB,sQCPe,IAAAC,EAAA,CACXC,gBCA2B,SAAwCC,GACnE,IAAM3B,EAAS4B,EAAAA,SAAQ,WAAM,OAAAC,EAAAA,EAAEC,OAAOH,EAAOE,KAAG,GAAE,IAC5CE,EAAQH,EAAOA,SAAC,WAAM,OAAAD,EAAOE,OAAI,IAEjCT,EAAeY,EAAAA,kBAEf9B,EAAkB+B,EAAAA,SACpBvB,EAA0CqB,EAAOX,EAAac,aAD3D7B,OAAM8B,OAgBb,OAZAC,EAAAA,WAAU,WACND,EAAQzB,EAA0CqB,EAAOX,EAAac,YACzE,GAAE,CAACd,EAAcpB,EAAQ+B,IAE1BK,EAAAA,WAAU,WACN,IAAMC,EAAU,WACZF,EAAQzB,EAA0CqB,EAAOO,OAAOC,SAASC,OAAOC,UAAU,IAC9F,EAEA,OADAH,OAAOI,iBAAiB,kBAAmBL,GACpC,WAAM,OAAAC,OAAOK,oBAAoB,kBAAmBN,GAC/D,GAAG,CAACN,IAEG1B,CACX,EDtBIc,sBAAqBA,EACrByB,gBEN2B,SAACb,GAC5B,IAAMc,EAAO,GAAGC,OAAAR,OAAOC,SAASQ,SAAQ,KAAM5B,EAAsBY,GACpEiB,QAAQC,aAAYC,EAAAA,EAAA,CAAA,EACbF,QAAQG,QACXC,GAAIP,EACJQ,IAAKR,IACN,GAAIA,GAEPP,OAAOgB,cAAc,IAAIC,MAAM,mBACnC,EFFIC,UGNE,SAAoBC,GAIlBA,EAAqB,cACrBzC,EAASR,YAAciD,EAAqB,aAG5CA,EAA8B,uBAC9BzC,EAASP,qBAAuBgD,EAA8B,qBAEtE"}